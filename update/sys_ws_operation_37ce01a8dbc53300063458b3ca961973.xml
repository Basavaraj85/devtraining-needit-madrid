<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>POST</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	var writer = response.getStreamWriter(),
	
	hdrs = {};
		var x=request.body.data;
		var inc='';
		var priority='';
		var state='';
		var assigned_to='';
		var context='';
		var command='';
		var message='';
		var status ='';
		var desc='';
		var caller='';
		var content='';
		var summary='';
		var comments='';
		var snurgency='';
		var sdesc ='';
		var caller_first_name ='';
		
		data={};
			
			var numbers=x.queryResult.parameters.number + "";//Get the "number" value from Dataflow parameter in the "numbers" variable
			var Dataflow_S3id=x.queryResult.parameters.S3_ID;//Get the S3_ID from dataflow in a variable.
			
			var ci = new GlideRecord("incident");//Create an Object to store rows from the incident table.
			var cu = new GlideRecord ("sys_user") ; // Create an object to store records from sys_user table.We are trying to fetch the caller details.
			
			if(x.queryResult.intent.displayName=='status_check')
				{
				
				ci.addQuery("number",'ENDSWITH', numbers);//Build a query
				ci.query(); //Execute a query.
				
				//Process returned records.
				if (ci.next()) {
					
					if(ci.assigned_to!='')
						assigned_to=ci.getDisplayValue('assigned_to');
					else
						assigned_to="no one";
					
					message="Incident "+ci.number+" is currently assigned to "+assigned_to+". Current state of the incident is "+ci.getDisplayValue('state')+". This incident was last updated by "+ci.sys_updated_by+" on "+ci.sys_updated_on+". If you want you can ask for the update from "+assigned_to+" by updating additional comments.";
					//summary={}
						context='success';
					}
				}
				
				if(x.queryResult.intent.displayName=='priority_check')
					{
					ci.addQuery("number",'ENDSWITH', numbers);
					ci.query();
					if (ci.next()) {
						
						priority = ci.getDisplayValue('priority');
						
						message="The priority of the Incident "+ci.number+" is "+priority;
						//summary={}
							context='success';
						}
					}
					
					if(x.queryResult.intent.displayName=='Create_Ticket_S3')
						{
						cu.initialize();
						cu.addQuery("user_name", Dataflow_S3id);
						cu.query();
						if (cu.next())
							{
							caller_first_name = cu.getDisplayValue('first_name');//Fetch First_name for a given S3_id and put it in a variable.
							message="Welcome  " + caller_first_name + ", please provide your problem description";
							//summary={}
								context='success';
							}
							else
								{
								message = "Sorry your S3 ID does not exist in the system. Please enter a valid S3 ID.";
								context='success';
							}
							
						}
						
						
						if(x.queryResult.intent.displayName=='Create_Ticket_S3_short_desc_urgency')
							{
							
							var sdescriptions=x.queryResult.parameters.short_desc;
							snurgency=x.queryResult.parameters.urgency;
							//var Dataflow_S3id=x.queryResult.parameters.S3_ID;
							
							cu.initialize();
							cu.addQuery("user_name", Dataflow_S3id);
							cu.query();
							if (cu.next()) {
								var full_name = cu.getDisplayValue("name");
								var c_id=cu.getDisplayValue('sys_id');
							}
							ci.initialize();
							ci.setValue('short_description',sdescriptions);
							ci.setValue('urgency',snurgency);
							ci.setValue('caller_id',c_id);
							ci.insert();
							inc = ci.getDisplayValue('number');
							
							message = "Incident created " +inc + " for " + sdescriptions + " with urgency " + snurgency ;
							context='success';
						}
						
						//	var messages="Incident ";
						hdrs['Content-Type'] = 'application/json';
						response.setStatus(200);
						response.setHeaders(hdrs);
						var response_body = {
							"fulfillmentText": message,
							"payload":{
								"google": {
									"expectUserResponse": true,
									"richResponse": {
										"items": [
										{
											"simpleResponse": {
												"textToSpeech": message
											}
										}
										]
									}
								}
							}
						};
						writer.writeString(global.JSON.stringify(response_body));
						//return response_body;
					})(request, response);
					]]></operation_script>
        <operation_uri>/api/x_58872_needit/dialogflow_ticket_creation</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-04-23 02:51:49</sys_created_on>
        <sys_id>37ce01a8dbc53300063458b3ca961973</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>POST</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ws_operation_37ce01a8dbc53300063458b3ca961973</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-04-23 23:08:57</sys_updated_on>
        <web_service_definition display_value="Dialogflow Ticket creation">350ff8acdb853300063458b3ca9619b0</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
